//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub username: String,
    pub display_name: String,
    #[sea_orm(column_type = "Text")]
    pub bio: String,
    pub status: String,
    #[sea_orm(column_type = "Text")]
    pub status_description: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub profile_pic_override: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub user_icon: Option<String>,
    pub last_api_update_at: Option<DateTimeWithTimeZone>,
    pub raw_data: Option<Json>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::friendships::Entity")]
    Friendships,
    #[sea_orm(has_many = "super::user_attribute_history::Entity")]
    UserAttributeHistory,
    #[sea_orm(has_many = "super::user_location_history::Entity")]
    UserLocationHistory,
}

impl Related<super::friendships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Friendships.def()
    }
}

impl Related<super::user_attribute_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAttributeHistory.def()
    }
}

impl Related<super::user_location_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLocationHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
